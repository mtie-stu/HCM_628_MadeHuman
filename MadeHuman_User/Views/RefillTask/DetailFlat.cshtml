@model List<Madehuman_Share.ViewModel.Inbound.RefillTaskDetailWithHeaderViewModel>

@{
    ViewData["Title"] = "Refill";

    // Stats tổng (toàn bộ dữ liệu), lấy từ ViewBag — KHÔNG dùng Model vì Model đã được cắt theo trang
    var total = (int)(ViewBag.TotalRecords ?? 0);
    var done = (int)(ViewBag.TotalDone ?? 0);
    var pending = (int)(ViewBag.TotalPending ?? 0);
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
<link rel="stylesheet" href="~/css/pages/Refill/refill-detailflat.css" asp-append-version="true" />

<div class="refill-page">
    <div class="container mt-4">

        <!-- Header -->
        <div class="page-head mb-2">
            <div>
                <h2 class="page-title"><i class="bi bi-table"></i> Danh sách chi tiết nhiệm vụ bổ sung kho</h2>
                <div class="muted">Dữ liệu gộp theo từng nhiệm vụ (RefillTaskId).</div>
            </div>
            <div class="toolbar">
                <label class="form-check-label me-2">
                    <input id="togglePending" type="checkbox" class="form-check-input me-1" checked />
                    Chỉ hiển thị mục <strong>chưa bổ sung</strong>
                </label>
            </div>
        </div>

        <!-- Stats -->
        <div class="stat-grid">
            <div class="stat-card">
                <div class="stat-ico"><i class="bi bi-collection"></i></div>
                <div class="stat-meta"><div class="label">Tổng bản ghi</div><div class="value">@total</div></div>
            </div>
            <div class="stat-card">
                <div class="stat-ico"><i class="bi bi-check2-circle"></i></div>
                <div class="stat-meta"><div class="label">Đã hoàn thành</div><div class="value">@done</div></div>
            </div>
            <div class="stat-card">
                <div class="stat-ico"><i class="bi bi-hourglass-split"></i></div>
                <div class="stat-meta"><div class="label">Đang chờ</div><div class="value">@pending</div></div>
            </div>
            <div class="stat-card">
                <div class="stat-ico"><i class="bi bi-diagram-3"></i></div>
                <div class="stat-meta">
                    <div class="label">Số nhiệm vụ</div>
                    <div class="value">@((int)(ViewBag.TotalGroups ?? 0))</div>
                </div>
            </div>
        </div>

        @{
            // NHÓM theo RefillTaskId nhưng chỉ trên dữ liệu của TRANG hiện tại
            var groups = (Model ?? new()).GroupBy(x => x.RefillTaskId)
            .OrderByDescending(g => g.Max(i => i.CreateAt))
            .ToList();
        }

        @if (groups.Count == 0)
        {
            <div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle"></i> Không có chi tiết nhiệm vụ nào.
            </div>
        }
        else
        {
            <div class="accordion" id="refillDetailAccordion">
                @for (int gi = 0; gi < groups.Count; gi++)
                {
                    var g = groups[gi];
                    var first = g.First();
                    var shortId = g.Key.ToString();
                    var displayId = shortId.Length > 6 ? shortId[..3] + "..." + shortId[^3..] : shortId;

                    <div class="accordion-item mb-2">
                        <h2 class="accordion-header" id="heading-@gi">
                            <button class="accordion-button collapsed" type="button"
                                    data-bs-toggle="collapse" data-bs-target="#collapse-@gi"
                                    aria-expanded="false" aria-controls="collapse-@gi">
                                <i class="bi bi-clipboard-check"></i>
                                <span class="task-chip copy-guid" data-guid="@g.Key" title="Bấm để copy ID đầy đủ">@displayId</span>
                                <span class="ms-3 text-muted"><i class="bi bi-person-circle"></i> @first.CreateBy</span>
                                <span class="ms-3 text-muted"><i class="bi bi-clock"></i> @first.CreateAt.ToString("dd/MM/yyyy HH:mm")</span>
                            </button>
                        </h2>

                        <div id="collapse-@gi" class="accordion-collapse collapse" aria-labelledby="heading-@gi" data-bs-parent="#refillDetailAccordion">
                            <div class="accordion-body">
                                <div class="table-responsive">
                                    <table class="table table-bordered table-hover table-sm align-middle">
                                        <thead class="table-light">
                                            <tr>
                                                <th class="th-muted">Hành động</th>
                                                <th class="th-muted"><i class="bi bi-upc-scan"></i> SKU</th>
                                                <th class="th-muted"><i class="bi bi-box-arrow-in-left"></i> From</th>
                                                <th class="th-muted"><i class="bi bi-box-arrow-right"></i> To</th>
                                                <th class="th-muted text-end"><i class="bi bi-hash"></i> Số lượng</th>
                                                <th class="th-muted text-center"><i class="bi bi-check2-square"></i> Trạng thái</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in g)
                                            {
                                                var isDone = item.IsRefilled;
                                                var rowCls = isDone ? "row-done" : "row-pending";
                                                var sku = item.SKU;
                                                var fromName = item.FromLocationName;
                                                var toName = item.ToLocationName;

                                                <tr class="@rowCls" data-status="@(isDone ? "done" : "pending")">
                                                    <td class="text-nowrap">
                                                        @if (!isDone)
                                                        {
                                                            <a class="btn btn-sm btn-outline-success btn-scan"
                                                               asp-controller="RefillTask"
                                                               asp-action="ValidateScan"
                                                               asp-route-refillTaskId="@item.RefillTaskId"
                                                               asp-route-refillTaskDetailId="@item.DetailId"
                                                               asp-route-fromLocation="@item.FromLocation"
                                                               asp-route-toLocation="@item.ToLocation"
                                                               asp-route-sku="@item.SKU"
                                                               asp-route-quantity="@item.Quantity"
                                                               asp-route-createBy="@item.CreateBy"
                                                               asp-route-createAt="@item.CreateAt.ToString("O")">
                                                                <i class="bi bi-upc-scan"></i> Quét
                                                            </a>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (!string.IsNullOrWhiteSpace(sku))
                                                        {
                                                            <span class="sku-chip">@sku</span>
                                                        }
                                                    </td>
                                                    <td><span class="loc-chip"><i class="bi bi-geo-alt"></i> @fromName</span></td>
                                                    <td><span class="loc-chip"><i class="bi bi-geo"></i> @toName</span></td>
                                                    <td class="text-end qty">@item.Quantity</td>
                                                    <td class="text-center">
                                                        @if (isDone)
                                                        {
                                                            <span class="badge text-bg-success">Đã bổ sung</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge text-bg-warning">Chưa bổ sung</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Pagination -->
            <div class="mt-3 d-flex justify-content-center">
                @Html.Raw(ViewBag.Pagination)
            </div>
        }
    </div>

    <!-- Inline alert -->
    <div id="inlineAlert" class="inline-alert d-none"></div>
</div>

@section Scripts {
    <script>
        (function(){
          const toggle   = document.getElementById('togglePending');
          const alertEl  = document.getElementById('inlineAlert');
          const accRoot  = document.getElementById('refillDetailAccordion');

          // ===== Inline alert (dùng chung) =====
          function showInline(type, text){
            alertEl.className = 'inline-alert ' + (type==='success'?'success':'error');
            alertEl.textContent = text;
            alertEl.classList.remove('d-none');
            requestAnimationFrame(()=> alertEl.classList.add('show'));
            setTimeout(()=>{ 
              alertEl.classList.remove('show'); 
              setTimeout(()=> alertEl.classList.add('d-none'), 200); 
            }, 2000);
          }

          // ===== Lọc chỉ hiển thị pending =====
          function applyFilter(){
            const onlyPending = !!toggle?.checked;
            const items = accRoot?.querySelectorAll('.accordion-item') || [];

            items.forEach(item => {
              const rows = item.querySelectorAll('tbody tr[data-status]');
              let hasPending = false;

              rows.forEach(tr => {
                const isPending = tr.getAttribute('data-status') === 'pending';
                if (onlyPending) {
                  tr.style.display = isPending ? '' : 'none';
                } else {
                  tr.style.display = '';
                }
                if (isPending) hasPending = true;
              });

              // Ẩn cả nhóm nếu không còn dòng pending
              if (onlyPending && !hasPending) {
                const collapseEl = item.querySelector('.accordion-collapse');
                const btn = item.querySelector('.accordion-button');
                if (collapseEl?.classList.contains('show')) {
                  collapseEl.classList.remove('show');
                  btn?.classList.add('collapsed');
                  btn?.setAttribute('aria-expanded','false');
                }
                item.style.display = 'none';
              } else {
                item.style.display = '';
              }
            });
          }

          // Gắn sự kiện & chạy lần đầu cho toggle filter
          toggle?.addEventListener('change', applyFilter);
          applyFilter();

          // ===== Click-to-copy GUID đầy đủ =====
          accRoot?.addEventListener('click', function(e){
            const el = e.target.closest('.copy-guid');
            if (!el) return;
            e.preventDefault();
            e.stopPropagation();

            const full = el.getAttribute('data-guid');
            if (!full) return;

            if (navigator.clipboard?.writeText) {
              navigator.clipboard.writeText(full).then(()=>{
                showInline('success', '✅ Đã copy đầy đủ RefillTaskId');
              }).catch(()=>{
                showInline('error', '❌ Không thể copy.');
              });
            } else {
              // fallback cũ
              const ta = document.createElement('textarea');
              ta.value = full;
              ta.style.position = 'fixed';
              ta.style.opacity = '0';
              document.body.appendChild(ta);
              ta.select();
              try { 
                document.execCommand('copy'); 
                showInline('success', '✅ Đã copy đầy đủ RefillTaskId'); 
              }
              catch { showInline('error', '❌ Không thể copy.'); }
              finally { document.body.removeChild(ta); }
            }
          });

          // ===== Spinner cho nút Quét =====
          document.querySelectorAll('.btn-scan').forEach(btn=>{
            btn.addEventListener('click', function(){
              if (this.dataset.loading === '1') return;
              this.dataset.loading = '1';
              this.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Đang mở...';
            });
          });

        })();
    </script>
}
