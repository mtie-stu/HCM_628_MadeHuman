@using Madehuman_Share.ViewModel.Inbound
@model RefillTaskFullViewModel

@{
    ViewData["Title"] = "Refill";
    Layout = "~/Views/Shared/_Layout.cshtml";

    var currentUser = Context.Request.Cookies["EmailOrId"];
    Model.CreateBy = currentUser ?? "";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" />
<link rel="stylesheet" href="~/css/pages/Refill/refill-create.css" asp-append-version="true" />

<div class="refill-page">
    <div class="container mt-4">
        <div class="page-head mb-3">
            <h2 class="page-title"><i class="bi bi-box-seam"></i> Tạo nhiệm vụ bổ sung kho</h2>
            <div class="d-flex gap-2">
                <a asp-action="Index" class="btn btn-outline"><i class="bi bi-arrow-left-circle me-1"></i> Quay lại</a>
            </div>
        </div>

        @if (TempData["Success"] != null)
        {
            <div class="alert alert-success"><i class="bi bi-check-circle"></i> @TempData["Success"]</div>
        }
        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger"><i class="bi bi-exclamation-triangle"></i> @TempData["Error"]</div>
        }

        <form asp-action="Create" method="post" class="card shadow-sm p-4" id="createForm">
            <div class="mb-3">
                <label class="form-label"><i class="bi bi-person-circle"></i> Người tạo</label>
                <input asp-for="CreateBy" class="form-control" readonly />
            </div>

            <hr />
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h5 class="m-0"><i class="bi bi-list-ul"></i> Danh sách chi tiết bổ sung</h5>
                <span class="hint-chip d-none d-md-inline">Mẹo: Ctrl + Enter để thêm dòng</span>
            </div>

            <div class="table-responsive">
                <table class="table table-bordered align-middle" id="detailsTable">
                    <thead class="table-light">
                        <tr>
                            <th class="th-muted"><i class="bi bi-upc-scan"></i> SKU</th>
                            <th class="th-muted"><i class="bi bi-box-arrow-in-left"></i> From (GUID)</th>
                            <th class="th-muted"><i class="bi bi-box-arrow-right"></i> To (GUID)</th>
                            <th class="th-muted text-end"><i class="bi bi-hash"></i> Số lượng</th>
                            <th class="text-center th-muted" style="width:54px"><i class="bi bi-x-circle"></i></th>
                        </tr>
                    </thead>
                    <tbody id="detailsBody">
                        <tr class="row-new">
                            <td><input name="Details[0].SKU" class="form-control sku-input" placeholder="VD: SKU123" autocomplete="off" /></td>
                            <td><input name="Details[0].FromLocation" class="form-control guid-input" placeholder="GUID từ" autocomplete="off" /></td>
                            <td><input name="Details[0].ToLocation" class="form-control guid-input" placeholder="GUID đến" autocomplete="off" /></td>
                            <td><input name="Details[0].Quantity" type="number" min="1" class="form-control qty-input text-end" placeholder="Số lượng" /></td>
                            <td class="text-center">
                                <button type="button" class="btn btn-outline-danger btn-sm btn-remove" title="Xoá dòng">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <button type="button" class="btn btn-outline mb-3" id="btnAddRow">
                <i class="bi bi-plus-circle"></i> Thêm dòng
            </button>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-orange" id="btnSubmit">
                    <i class="bi bi-check-circle me-1"></i> Tạo nhiệm vụ
                </button>
                <a asp-action="Index" class="btn btn-outline">
                    <i class="bi bi-arrow-left-circle me-1"></i> Quay lại
                </a>
            </div>
        </form>
    </div>

    <!-- Inline alert -->
    <div id="inlineAlert" class="inline-alert d-none"></div>
</div>
@section Scripts {
<script>
(function(){
  const tbody = document.getElementById('detailsBody');
  const btnAddRow = document.getElementById('btnAddRow');
  const form = document.getElementById('createForm');
  const btnSubmit = document.getElementById('btnSubmit');
  const alertEl = document.getElementById('inlineAlert');

  function showInline(type, text){
    alertEl.className = 'inline-alert ' + (type==='success'?'success':'error');
    alertEl.textContent = text;
    alertEl.classList.remove('d-none');
    requestAnimationFrame(()=> alertEl.classList.add('show'));
    setTimeout(()=>{ alertEl.classList.remove('show'); setTimeout(()=> alertEl.classList.add('d-none'), 200); }, 2000);
  }

  const GUID_RE = /^[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}$/;

  function isGuid(v){ return GUID_RE.test((v||'').trim()); }
  function sanitizeSku(v){ return (v||'').trim().toUpperCase(); }
  function isQty(v){ const n = Number(v); return Number.isFinite(n) && n > 0; }

  function focusLastRowFirstInput(){
    const last = tbody.rows[tbody.rows.length-1];
    if (!last) return;
    const inp = last.querySelector('.sku-input') || last.querySelector('input');
    inp && inp.focus();
  }

  function rebuildIndices(){
    // Đảm bảo index liên tục để ModelBinder bind đúng
    [...tbody.rows].forEach((tr, idx)=>{
      tr.querySelectorAll('input[name^="Details["]').forEach(input=>{
        const name = input.getAttribute('name');
        const newName = name.replace(/Details\[\d+\]/, `Details[${idx}]`);
        input.setAttribute('name', newName);
      });
    });
  }

  function addRow(){
    const idx = tbody.rows.length;
    const row = document.createElement('tr');
    row.className = 'row-new';
    row.innerHTML = `
      <td><input name="Details[${idx}].SKU" class="form-control sku-input" placeholder="VD: SKU123" autocomplete="off" /></td>
      <td><input name="Details[${idx}].FromLocation" class="form-control guid-input" placeholder="GUID từ" autocomplete="off" /></td>
      <td><input name="Details[${idx}].ToLocation" class="form-control guid-input" placeholder="GUID đến" autocomplete="off" /></td>
      <td><input name="Details[${idx}].Quantity" type="number" min="1" class="form-control qty-input text-end" placeholder="Số lượng" /></td>
      <td class="text-center">
        <button type="button" class="btn btn-outline-danger btn-sm btn-remove" title="Xoá dòng">
          <i class="bi bi-trash"></i>
        </button>
      </td>
    `;
    tbody.appendChild(row);
    focusLastRowFirstInput();
  }

  function removeRow(btn){
    if (tbody.rows.length <= 1){
      showInline('error','⚠️ Cần ít nhất 1 dòng chi tiết.');
      return;
    }
    const tr = btn.closest('tr');
    tr.classList.add('row-removing');
    setTimeout(()=>{
      tr.remove();
      rebuildIndices();
    }, 150);
  }

  // Delegation: remove row + instant UX helpers
  tbody.addEventListener('click', (e)=>{
    const target = e.target.closest('.btn-remove');
    if (target){ removeRow(target); }
  });

  // SKU auto-uppercase; GUID quick validate; Qty numeric check
  tbody.addEventListener('input', (e)=>{
    const el = e.target;
    if (el.classList.contains('sku-input')){
      el.value = sanitizeSku(el.value);
      el.classList.remove('is-invalid');
    }
    if (el.classList.contains('guid-input')){
      const v = el.value.trim();
      if (v === '' || isGuid(v)) el.classList.remove('is-invalid'); else el.classList.add('is-invalid');
    }
    if (el.classList.contains('qty-input')){
      const ok = isQty(el.value);
      if (ok) el.classList.remove('is-invalid'); else el.classList.add('is-invalid');
    }
  });

  // Add row button
  btnAddRow.addEventListener('click', addRow);

  // Ctrl+Enter để thêm dòng
  document.addEventListener('keydown', (e)=>{
    if (e.ctrlKey && e.key === 'Enter'){ e.preventDefault(); addRow(); }
  });

  // Validate trước submit
  form.addEventListener('submit', (e)=>{
    // loading state nút submit
    btnSubmit.disabled = true;
    btnSubmit.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Đang tạo...';

    let ok = true;
    const skuEls = form.querySelectorAll('.sku-input');
    const fromEls = form.querySelectorAll('.guid-input[name$=".FromLocation"]');
    const toEls   = form.querySelectorAll('.guid-input[name$=".ToLocation"]');
    const qtyEls  = form.querySelectorAll('.qty-input');

    skuEls.forEach(el=>{ const v=sanitizeSku(el.value); el.value=v; if(!v){ el.classList.add('is-invalid'); ok=false; } });
    fromEls.forEach(el=>{ if(!isGuid(el.value)){ el.classList.add('is-invalid'); ok=false; } });
    toEls.forEach(el=>{ if(!isGuid(el.value)){ el.classList.add('is-invalid'); ok=false; } });
    qtyEls.forEach(el=>{ if(!isQty(el.value)){ el.classList.add('is-invalid'); ok=false; } });

    if (!ok){
      e.preventDefault();
      btnSubmit.disabled = false;
      btnSubmit.innerHTML = '<i class="bi bi-check-circle me-1"></i> Tạo nhiệm vụ';
      showInline('error','❌ Vui lòng điền đúng SKU, GUID From/To và số lượng > 0.');
      return;
    }

    // đảm bảo index liên tục trước khi submit
    rebuildIndices();
  });
})();
</script>
}
