@using Madehuman_Share.ViewModel.PartTime_Task
@model CheckinPageViewModel

@{
    // ViewData["Title"] = "Chấm công";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<!-- ❗️Dùng file CSS mới. Gỡ link checkin.css cũ để tránh đè/loạn style -->
<link href="~/css/pages/User/checkin.css" rel="stylesheet" asp-append-version="true" />

<div class="checkin-page">
    <div class="container mt-3">

        <!-- Header banner -->
        <div class="header-banner mb-4 d-flex flex-column flex-lg-row align-items-center justify-content-between gap-3">
            <div class="text-center text-lg-start">
                <h2 class="title mb-1">
                    <i class="bi bi-calendar-check me-2"></i>Hệ thống chấm công
                </h2>
                <p class="sub mb-0">Ghi nhận thời gian làm việc hàng ngày một cách nhanh chóng và chính xác.</p>
            </div>
            <div class="d-flex align-items-center gap-2">
                <span class="badge rounded-pill bg-light text-dark fw-semibold px-3 py-2">
                    <i class="bi bi-calendar-date me-1"></i><span id="liveDate">--/--/----</span>
                </span>
                <span class="clock-pill">
                    <i class="bi bi-clock-history me-1"></i><span id="liveClock">--:--:--</span>
                </span>
            </div>
        </div>

        <div class="row g-4 align-items-start">
            <!-- Form chấm công -->
            <div class="col-lg-4">
                <div class="card shadow-sm border-0 card-section h-100">
                    <div class="card-header card-header-orange text-center">
                        <h4 class="mb-0"><i class="bi bi-fingerprint me-2"></i>Chấm công</h4>
                    </div>
                    <div class="card-body p-4">

                        @if (TempData["Success"] != null)
                        {
                            <div class="alert alert-success d-flex align-items-center">
                                <i class="bi bi-check-circle-fill me-2"></i>@TempData["Success"]
                            </div>
                        }
                        @if (TempData["Error"] != null)
                        {
                            <div class="alert alert-danger d-flex align-items-center">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>@TempData["Error"]
                            </div>
                        }

                        <!-- Step chips -->
                        <div class="d-flex gap-2 flex-wrap mb-3" id="chips">
                            <button type="button" class="chip" data-val="Checkin"><i class="bi bi-box-arrow-in-right me-1"></i>Check In</button>
                            <button type="button" class="chip" data-val="Checkout"><i class="bi bi-box-arrow-right me-1"></i>Check Out</button>
                            <button type="button" class="chip" data-val="Break"><i class="bi bi-cup-hot me-1"></i>Break</button>
                        </div>

                        <form asp-action="CheckInOut" method="post" id="checkForm">
                            <!-- Mã nhân viên -->
                            <div class="mb-3">
                                <label asp-for="Form.UserId" class="form-label fw-semibold">Mã nhân viên</label>
                                <div class="with-icon input-with-icon position-relative">
                                    <i class="bi bi-person-badge field-ico"></i>
                                    <input asp-for="Form.UserId" class="form-control" placeholder="Nhập ID tài khoản" autocomplete="off" id="userIdInput" />
                                    <button type="button" class="icon-btn paste-btn" data-target="userIdInput" title="Dán từ clipboard">
                                        <i class="bi bi-clipboard2-check"></i>
                                    </button>
                                </div>
                            </div>

                            <!-- Mã ca làm -->
                            <div class="mb-3">
                                <label asp-for="Form.PartTimeId" class="form-label fw-semibold">Mã ca làm</label>
                                <div class="with-icon input-with-icon position-relative">
                                    <i class="bi bi-qr-code field-ico"></i>
                                    <input asp-for="Form.PartTimeId" class="form-control" placeholder="Nhập ID Part-Time" autocomplete="off" id="partIdInput" />
                                    <button type="button" class="icon-btn paste-btn" data-target="partIdInput" title="Dán từ clipboard">
                                        <i class="bi bi-clipboard2-check"></i>
                                    </button>
                                </div>
                                <div class="small text-muted mt-1">Phím tắt: <kbd>F2</kbd> Mã NV, <kbd>F3</kbd> Mã ca</div>
                            </div>

                            <!-- Hành động -->
                            <div class="mb-3">
                              <label asp-for="Form.regime" class="form-label fw-semibold">📌 Hành động</label>

                              <div class="mh-select-wrap with-icon">
                                <i class="bi bi-ui-checks-grid"></i>

                                <!-- Select gốc: vẫn có options, ẩn đi để JS đọc & form vẫn submit -->
                                <select asp-for="Form.regime" id="regimeSelect" class="form-select mh-select-src" aria-hidden="true" tabindex="-1">
                                    <option value="">-- Chọn hành động --</option>
                                    <option value="Checkin">✅ Check In</option>
                                    <option value="Checkout">⏱️ Check Out</option>
                                    <option value="Break">☕ Nghỉ giải lao</option>
                                </select>

                                <!-- Nút hiển thị -->
                                <button type="button"
                                        class="mh-select"
                                        data-target="regimeSelect"
                                        aria-haspopup="listbox"
                                        aria-expanded="false"
                                        aria-controls="mh-menu-regimeSelect">
                                  <span class="mh-select__value">-- Chọn hành động --</span>
                                  <span class="mh-select__caret"><i class="bi bi-chevron-down"></i></span>
                                </button>

                                <!-- Menu sinh tự động bằng JS (không cần hardcode li) -->
                                <ul class="mh-select__menu" id="mh-menu-regimeSelect" role="listbox"></ul>
                              </div>

                              <small class="form-hint text-muted d-inline-block mt-1">
                                Tip: Ctrl+B bật/tắt Break
                              </small>
                            </div>




                            <!-- Break time -->
                            <div class="mb-3 collapse-anim" id="breakWrap">
                                <label asp-for="Form.BreakDuration" class="form-label fw-semibold">🕒 Thời gian nghỉ (hh:mm:ss)</label>
                                <input asp-for="Form.BreakDuration" placeholder="00:10:00" class="form-control" id="breakInput" />
                            </div>

                            <div class="d-grid">
                                <button type="submit" class="btn btn-orange ripple" id="submitBtn">
                                    <i class="bi bi-send-check me-1"></i> <span class="btn-text">Gửi chấm công</span>
                                </button>
                            </div>

                            <div class="mt-3 d-flex flex-wrap gap-2 small text-muted">
                                <span><i class="bi bi-lightning-charge-fill text-warning me-1"></i>Enter để gửi nhanh</span>
                                <span><i class="bi bi-stars text-info me-1"></i>Ctrl+B bật/tắt Break</span>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Lịch sử hôm nay -->
            <div class="col-lg-8">
                <div class="card shadow-sm border-0 card-section">
                    <div class="card-header card-header-orange d-flex align-items-center justify-content-between">
                        <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>Lịch sử hôm nay</h5>

                        <div class="btn-group btn-group-sm" role="group" aria-label="View switch">
                            <button type="button" class="btn btn-light fw-semibold active" id="btnTable"><i class="bi bi-table me-1"></i>Bảng</button>
                            <button type="button" class="btn btn-light fw-semibold" id="btnTimeline"><i class="bi bi-diagram-3 me-1"></i>Timeline</button>
                        </div>
                    </div>

                    <div class="card-body p-0">
                        @if (Model.TodayLogs == null || !Model.TodayLogs.Any())
                        {
                            <div class="p-4">
                                <div class="alert alert-warning text-center mb-0">
                                    <i class="bi bi-info-circle me-2"></i>Không có dữ liệu hôm nay.
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Table view -->
                            <div id="viewTable" class="table-wrap">
                                <div class="scroll-table">
                                    <table class="table table-bordered table-hover align-middle table-sm mb-0">
                                        <thead class="text-center">
                                            <tr>
                                                <th>👤 Nhân viên</th>
                                                <th>🆔 Ca làm</th>
                                                <th>🕒 Thời gian</th>
                                                <th>📌 Loại</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var log in Model.TodayLogs.OrderBy(l => l.Timestamp))
                                            {
                                                <tr>
                                                    <td>@log.UserId</td>
                                                    <td>@log.PartTimeId</td>
                                                    <td class="fw-semibold">@log.Timestamp.ToString("HH:mm:ss")</td>
                                                    <td>
                                                        @if (log.IsCheckIn)
                                                        {
                                                            <span class="badge badge-checkin">Check In</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge badge-checkout">Check Out</span>
                                                        }
                                                        @if (log.IsOvertime)
                                                        {
                                                            <span class="badge badge-overtime ms-2">Tăng ca</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <!-- Timeline view -->
                            <div id="viewTimeline" class="p-3 d-none">
                                <ul class="timeline list-unstyled m-0">
                                    @foreach (var log in Model.TodayLogs.OrderBy(l => l.Timestamp))
                                    {
                                        var type = log.IsCheckIn ? "in" : "out";
                                        <li class="timeline-item @type">
                                            <div class="dot"></div>
                                            <div class="content">
                                                <div class="time">@log.Timestamp.ToString("HH:mm:ss")</div>
                                                <div class="meta">
                                                    <span class="chip"><i class="bi bi-person-badge me-1"></i>@log.UserId</span>
                                                    <span class="chip"><i class="bi bi-qr-code me-1"></i>@log.PartTimeId</span>
                                                    @if (log.IsOvertime)
                                                    {
                                                        <span class="chip chip-ot"><i class="bi bi-lightning me-1"></i>Tăng ca</span>
                                                    }
                                                </div>
                                                <div class="label">
                                                    @if (log.IsCheckIn)
                                                    { <span class="badge badge-checkin">Check In</span> }
                                                    else
                                                    { <span class="badge badge-checkout">Check Out</span> }
                                                </div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Toast -->
    <div id="inlineAlert" class="inline-alert d-none"></div>

    <!-- Confetti mini -->
    <canvas id="fxCanvas" class="position-fixed" style="inset:0; pointer-events:none;"></canvas>
</div>

@section Scripts {
<script>
(function(){
  // ---------- Utils ----------
  const $  = (s,root=document)=>root.querySelector(s);
  const $$ = (s,root=document)=>Array.from(root.querySelectorAll(s));

  // ---------- MHSelect (custom dropdown) ----------
  const MHSelect = {
    init(id){
      const sel = document.getElementById(id);
      if(!sel) return;
      const wrap  = sel.closest('.mh-select-wrap');
      const btn   = wrap.querySelector('.mh-select');
      const menu  = wrap.querySelector('.mh-select__menu');
      const valueSpan = btn.querySelector('.mh-select__value');

      // Build menu từ <select> (giữ emoji bằng textContent)
      menu.innerHTML = '';
      [...sel.options].forEach(opt => {
        const li = document.createElement('li');
        li.role = 'option';
        li.dataset.value = (opt.value || '').trim();
        li.textContent = opt.text;
        if (!li.dataset.value) li.classList.add('is-placeholder');
        if (opt.selected) li.setAttribute('aria-selected','true');
        menu.appendChild(li);
      });

      function setValue(val, fireChange=true){
        const v = (val || '').trim();
        sel.value = v;
        const opt = sel.options[sel.selectedIndex];
        valueSpan.textContent = opt ? opt.text : '-- Chọn hành động --';
        menu.querySelectorAll('li').forEach(li=>{
          if ((li.dataset.value||'') === v) li.setAttribute('aria-selected','true');
          else li.removeAttribute('aria-selected');
        });
        if (fireChange) sel.dispatchEvent(new Event('change',{bubbles:true}));
      }

      const open  = ()=>{ btn.classList.add('is-open'); btn.setAttribute('aria-expanded','true'); menu.classList.add('show'); highlight(); };
      const close = ()=>{ btn.classList.remove('is-open'); btn.setAttribute('aria-expanded','false'); menu.classList.remove('show'); clearActive(); };

      function clearActive(){ menu.querySelectorAll('.is-active').forEach(x=>x.classList.remove('is-active')); }
      function highlight(){
        clearActive();
        const cur = [...menu.children].find(li=> (li.dataset.value||'') === (sel.value||'')) || menu.children[0];
        cur?.classList.add('is-active');
        cur?.scrollIntoView({block:'nearest'});
      }

      btn.addEventListener('click', (e)=>{
        e.preventDefault();
        menu.classList.contains('show') ? close() : open();
      });

      menu.addEventListener('click', (e)=>{
        const li = e.target.closest('li'); if(!li) return;
        setValue(li.dataset.value || '');
        close();
      });

      btn.addEventListener('keydown', (e)=>{
        const shown = menu.classList.contains('show');
        const items = [...menu.children];
        let idx = items.findIndex(x=>x.classList.contains('is-active'));
        if (e.key==='ArrowDown'){ e.preventDefault(); if(!shown){ open(); return; } idx = Math.min(items.length-1, idx+1); clearActive(); items[idx].classList.add('is-active'); items[idx].scrollIntoView({block:'nearest'}); }
        if (e.key==='ArrowUp'){   e.preventDefault(); if(!shown){ open(); return; } idx = Math.max(0, idx-1); clearActive(); items[idx].classList.add('is-active'); items[idx].scrollIntoView({block:'nearest'}); }
        if (e.key==='Enter' || e.key===' '){
          e.preventDefault();
          if(!shown){ open(); return; }
          const li = items[idx] || items[0];
          setValue(li.dataset.value||'');
          close();
        }
        if (e.key==='Escape'){ if(shown){ e.preventDefault(); close(); } }
      });

      document.addEventListener('click', (ev)=>{ if (!wrap.contains(ev.target)) close(); });

      // Đồng bộ label ban đầu
      setValue(sel.value, false);

      MHSelect._map[id] = { setValue };
    },
    setValue(id, val){ MHSelect._map[id]?.setValue(val); },
    _map:{}
  };
  window.MHSelect = MHSelect;

  // Khởi tạo dropdown custom
  MHSelect.init('regimeSelect');

  // ---------- Logic trang ----------
  const regimeSelect = $("#regimeSelect");
  const breakWrap    = $("#breakWrap");
  const breakInput   = $("#breakInput");
  const userIdInput  = $("#userIdInput");
  const partIdInput  = $("#partIdInput");
  const submitBtn    = $("#submitBtn");
  const toast        = $("#inlineAlert");
  const chipsWrap    = $("#chips");

  // Đồng hồ & ngày
  const liveClock = $("#liveClock"), liveDate = $("#liveDate");
  const pad = n => String(n).padStart(2,'0');
  function tick(){
    const d = new Date();
    liveClock.textContent = `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    liveDate.textContent  = `${pad(d.getDate())}/${pad(d.getMonth()+1)}/${d.getFullYear()}`;
  }
  tick(); setInterval(tick, 1000);

  // Toast
  function showToast(type, text){
    toast.className = 'inline-alert ' + (type === 'success' ? 'success' : 'error');
    toast.textContent = text;
    toast.classList.remove('d-none');
    requestAnimationFrame(()=> toast.classList.add('show'));
    setTimeout(()=> { toast.classList.remove('show'); setTimeout(()=> toast.classList.add('d-none'), 200); }, 2200);
  }

  // Chips <-> dropdown
  function setActiveChip(val){ $$('#chips .chip').forEach(c => c.classList.toggle('active', c.dataset.val === (val||'').trim())); }
  function toggleBreak(){
    const v = (regimeSelect.value || '').trim();
    if (v === "Break") { breakWrap?.classList.add("show"); breakInput?.focus(); }
    else breakWrap?.classList.remove("show");
  }

  chipsWrap.addEventListener('click', (e)=>{
    const btn = e.target.closest('.chip'); if(!btn) return;
    MHSelect.setValue('regimeSelect', btn.dataset.val || '');
    setActiveChip(regimeSelect.value); toggleBreak(); saveLast();
  });

  regimeSelect.addEventListener('change', ()=>{
    setActiveChip(regimeSelect.value); toggleBreak(); saveLast();
  });

  // Paste buttons
  $$('.paste-btn').forEach(btn=>{
    btn.addEventListener('click', async ()=>{
      try{
        const target = document.getElementById(btn.dataset.target);
        const txt = await navigator.clipboard.readText();
        if (txt && target){ target.value = txt.trim(); target.focus(); saveLast(); beep('ok'); }
      }catch{ beep('err'); showToast('error','Không đọc được clipboard.'); }
    });
  });

  // Beep
  function beep(type='ok'){
    try{
      const ctx = new (window.AudioContext||window.webkitAudioContext)();
      const o = ctx.createOscillator(), g = ctx.createGain();
      o.type = 'sine'; o.frequency.value = (type==='ok'? 720 : 240);
      o.connect(g); g.connect(ctx.destination);
      g.gain.setValueAtTime(.05, ctx.currentTime);
      g.gain.exponentialRampToValueAtTime(0.0001, ctx.currentTime + 0.18);
      o.start(); o.stop(ctx.currentTime + 0.18);
    }catch{}
  }

  // Ripple
  $$('.ripple').forEach(el=>{
    el.addEventListener('click', function(e){
      const rect = this.getBoundingClientRect();
      const r = document.createElement('span');
      r.className = 'btn-ripple';
      r.style.left = (e.clientX - rect.left) + 'px';
      r.style.top  = (e.clientY - rect.top)  + 'px';
      this.appendChild(r);
      setTimeout(()=> r.remove(), 600);
    }, {passive:true});
  });

  // Confetti mini
  function confetti(){
    const canvas = document.getElementById("fxCanvas"); if(!canvas) return;
    const ctx = canvas.getContext('2d');
    const W = canvas.width = innerWidth, H = canvas.height = innerHeight;
    const parts = Array.from({length: 80}, ()=>({
      x: Math.random()*W, y: -10 - Math.random()*H*.2,
      vx: (Math.random()-.5)*1.5, vy: 2+Math.random()*3.5,
      s: 2+Math.random()*3, a: .8+Math.random()*.2,
      c: Math.random()<.6 ? '#ee4d2d' : (Math.random()<.5?'#ffd5c9':'#6b7280')
    }));
    let t=0, raf;
    (function draw(){
      ctx.clearRect(0,0,W,H);
      parts.forEach(p=>{
        ctx.globalAlpha = p.a; ctx.fillStyle = p.c;
        ctx.beginPath(); ctx.arc(p.x,p.y,p.s,0,Math.PI*2); ctx.fill();
        p.x += p.vx; p.y += p.vy; p.vy *= 0.99;
      });
      t++; if (t<60) raf = requestAnimationFrame(draw); else ctx.clearRect(0,0,W,H);
    })();
    setTimeout(()=> cancelAnimationFrame(raf), 900);
  }

  // Persist last inputs
  const KEY = 'mh.checkin.last';
  function saveLast(){ localStorage.setItem(KEY, JSON.stringify({
    u: userIdInput?.value || '', p: partIdInput?.value || '', r: (regimeSelect?.value||'').trim()
  })); }
  (function restoreLast(){
    try{
      const j = JSON.parse(localStorage.getItem(KEY) || '{}');
      if (j.u) userIdInput.value = j.u;
      if (j.p) partIdInput.value = j.p;
      if (j.r) MHSelect.setValue('regimeSelect', j.r); // sync cả UI & select
      setActiveChip(regimeSelect.value); toggleBreak();
    }catch{}
  })();
  [userIdInput, partIdInput].forEach(el=> el?.addEventListener('input', saveLast));

  // Shortcuts
  window.addEventListener('keydown', (e)=>{
    if (e.key === 'F2'){ e.preventDefault(); userIdInput?.focus(); }
    if (e.key === 'F3'){ e.preventDefault(); partIdInput?.focus(); }
    if (e.ctrlKey && (e.key === 'b' || e.key === 'B')){
      e.preventDefault();
      const next = ((regimeSelect.value||'').trim() === 'Break') ? '' : 'Break';
      MHSelect.setValue('regimeSelect', next);
      setActiveChip(regimeSelect.value); toggleBreak(); saveLast();
    }
  });

  // Switch views
  const btnTable = $("#btnTable"), btnTimeline = $("#btnTimeline");
  const viewTable = $("#viewTable"), viewTimeline = $("#viewTimeline");
  function switchView(v){
    if (!viewTable || !viewTimeline) return;
    if (v === 'timeline'){
      viewTimeline.classList.remove('d-none'); viewTable.classList.add('d-none');
      btnTimeline.classList.add('active'); btnTable.classList.remove('active');
    } else {
      viewTable.classList.remove('d-none'); viewTimeline.classList.add('d-none');
      btnTable.classList.add('active'); btnTimeline.classList.remove('active');
    }
  }
  btnTable?.addEventListener('click', ()=> switchView('table'));
  btnTimeline?.addEventListener('click', ()=> switchView('timeline'));

  // Submit guard
  const form = document.getElementById("checkForm");
  form?.addEventListener('submit', function(e){
    const userId = (userIdInput.value||'').trim();
    const partId = (partIdInput.value||'').trim();
    const regime = (regimeSelect.value||'').trim();
    if (!userId || !partId || !regime){
      e.preventDefault(); beep('err');
      showToast('error','⚠️ Vui lòng nhập đủ Mã nhân viên, Mã ca và chọn Hành động.');
      return;
    }
    if (regime === 'Break'){
      const br = (breakInput?.value || '').trim();
      if (!br){
        e.preventDefault(); beep('err');
        showToast('error','⚠️ Vui lòng nhập thời gian nghỉ (hh:mm:ss).');
        return;
      }
    }
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Đang gửi...';
    beep('ok'); confetti();
  });

  userIdInput?.focus();
})();
</script>
}
