@{
    ViewData["Title"] = "Ki·ªÉm h√†ng Mix SKU";
}

<div class="container mt-4">
    <div class="row">
        <!-- üìç Card V·ªã tr√≠ & BasketId (1/4 b√™n tr√°i) -->
        <div class="col-md-3">
            <div class="card shadow-sm mb-3">
                <div class="card-header">üìç V·ªã tr√≠ l√†m vi·ªác</div>
                <div class="card-body">
                    <input type="text" id="locationInput" class="form-control mb-2" placeholder="üîé V·ªã tr√≠ ki·ªÉm" />
                    <input type="text" id="basketInput" class="form-control" placeholder="üß∫ M√£ r·ªï (BasketId)" />
                </div>
            </div>

            <!-- üîç Thao t√°c -->
            <div class="card shadow-sm">
                <div class="card-header">üîç Qu√©t m√£</div>
                <div class="card-body">
                    <input type="text" id="mainInput" class="form-control mb-2" placeholder="üì¶ Qu√©t m√£ SKU..." autofocus autocomplete="off" />

                    <div id="productInfo" class="mt-3 d-none">
                        <p><strong>T√™n:</strong> <span id="productName">---</span></p>
                        <p><strong>SKU:</strong> <span id="sku">---</span></p>
                        <div id="carouselContainer" class="mt-2">
                            <div id="imageCarousel" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-inner"></div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon"></span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next">
                                    <span class="carousel-control-next-icon"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div id="messageArea" class="alert d-none mt-3" role="alert"></div>
                </div>
            </div>
        </div>

        <!-- üßæ Grid 12 slots (2/4 b√™n ph·∫£i) -->
        <div class="col-md-9">
            <div class="row" id="slotGrid">
                @for (int i = 1; i <= 12; i++)
                {
                    <div class="col-md-3 mb-3">
                        <div class="card text-center h-100" id="slotCard_@i">
                            <div class="card-body">
                                <div class="mb-2"><strong>#@i</strong></div>
                                <button id="btnDetail_@i" class="btn btn-sm btn-primary mb-2" onclick="showDetail(@i)">Chi ti·∫øt</button>
                                <input type="hidden" id="slotData_@i" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const successSFX = new Audio("/sounds/success.mp3");
        const errorSFX = new Audio("/sounds/error.mp3");

        const state = {
            checkTaskId: null,
            slots: [],
            selectedProductSKU: null,
            selectedSlotIndex: null
        };

        function showMessage(msg, type = "info") {
            const area = document.getElementById("messageArea");
            area.className = `alert alert-${type}`;
            area.textContent = msg;
            area.classList.remove("d-none");
        }

        function updateCarousel(imageUrls) {
            const carouselInner = document.querySelector(".carousel-inner");
            if (!carouselInner) return;

            if (!imageUrls || imageUrls.length === 0) {
                carouselInner.innerHTML = `<div class="d-flex align-items-center justify-content-center bg-light h-100 text-muted">
                                            <p class="text-center m-3">Kh√¥ng c√≥ ·∫£nh.</p></div>`;
                return;
            }

            carouselInner.innerHTML = imageUrls.map((url, i) => `
                                    <div class="carousel-item ${i === 0 ? 'active' : ''}">
                                        <img src="/proxy-image?url=${encodeURIComponent(url)}"
                                            class="img-thumbnail d-block mx-auto"
                                            style="max-height: 250px; object-fit: contain;"
                                            alt="·∫¢nh s·∫£n ph·∫©m">
                                    </div>`).join("");
        }

        function showDetail(slotIndex) {
            const detail = state.slots.find(s => s.orderIndex === slotIndex);
            if (!detail) return;
            alert(`üì¶ ${detail.productName}\nSKU: ${detail.sku}\nS·ªë l∆∞·ª£ng: ${detail.requiredQuantity}`);
        }

        function updateSlotStyles() {
            state.slots.forEach(slot => {
                const card = document.getElementById(`slotCard_${slot.orderIndex}`);
                const btn = document.getElementById(`btnDetail_${slot.orderIndex}`);
                if (!card || !btn) return;
                if (slot.isChecked) {
                    card.classList.add("bg-light", "opacity-50");
                    btn.classList.replace("btn-primary", "btn-secondary");
                    btn.disabled = true;
                } else {
                    card.classList.remove("bg-light", "opacity-50");
                    btn.classList.replace("btn-secondary", "btn-primary");
                    btn.disabled = false;
                }
            });
        }

        // üëâ Ph·ª•c h·ªìi tr·∫°ng th√°i n·∫øu c√≥ localStorage
        const saved = localStorage.getItem("checkTaskState");
        if (saved) {
            const parsed = JSON.parse(saved);
            state.checkTaskId = parsed.checkTaskId;
            state.slots = parsed.slots;
            updateSlotStyles();
            showMessage("üîÑ ƒê√£ kh√¥i ph·ª•c nhi·ªám v·ª• ki·ªÉm h√†ng t·ª´ phi√™n tr∆∞·ªõc", "info");
        }

        document.getElementById("basketInput").addEventListener("change", async function () {
            const basketId = this.value.trim();
            const jwt = document.cookie.split("; ").find(x => x.startsWith("JWTToken="))?.split("=")[1];
            if (!basketId || !jwt) return showMessage("‚ùå Thi·∫øu m√£ r·ªï ho·∫∑c token", "danger");

            try {
                const res = await fetch(`https://localhost:7204/api/CheckTask/assign-user/${basketId}`, {
                    method: "POST",
                    headers: { "Authorization": `Bearer ${jwt}` }
                });

                const task = await res.json();
                if (!res.ok) throw new Error(task?.message || "Kh√¥ng th·ªÉ g√°n nhi·ªám v·ª•");

                state.checkTaskId = task.id;
                state.slots = [];

                task.details.forEach(detail => {
                    detail.outboundTaskItem.itemDetails.forEach(i => {
                        state.slots.push({
                            checkTaskDetailId: detail.id,
                            orderIndex: detail.orderIndex,
                            skuId: i.productSKUId,
                            requiredQuantity: i.quantity,
                            isChecked: detail.status === 1,
                            productName: "--",
                            sku: "--",
                            imageUrls: []
                        });
                    });
                });

                const skuIds = [...new Set(state.slots.map(s => s.skuId))];
                const productMap = {};

                for (const skuId of skuIds) {
                    const res = await fetch(`https://localhost:7204/api/Product/sku/${skuId}`, {
                        headers: { "Authorization": `Bearer ${jwt}` }
                    });

                    if (res.ok) {
                        const product = await res.json();
                        productMap[skuId] = product;
                    }
                }

                state.slots.forEach(slot => {
                    const product = productMap[slot.skuId];
                    if (product) {
                        slot.productName = product.productName;
                        slot.sku = product.skuCode;
                        slot.imageUrls = product.imageUrls || [];
                    }
                });

                // üëâ L∆∞u localStorage
                localStorage.setItem("checkTaskState", JSON.stringify({
                    checkTaskId: state.checkTaskId,
                    slots: state.slots
                }));

                updateSlotStyles();
                showMessage("‚úÖ ƒê√£ g√°n nhi·ªám v·ª• v√† t·∫£i th√¥ng tin s·∫£n ph·∫©m", "success");
                successSFX.play();
            } catch (err) {
                errorSFX.play();
                showMessage("‚ùå " + err.message, "danger");
            }
        });

        document.getElementById("mainInput").addEventListener("change", async function () {
            const code = this.value.trim();
            this.value = "";
            const jwt = document.cookie.split("; ").find(x => x.startsWith("JWTToken="))?.split("=")[1];
            if (!jwt || !code) return;

            // Step 2: Qu√©t SKU
            if (!state.selectedProductSKU) {
                const found = state.slots.find(s => s.sku === code && !s.isChecked);
                if (!found) {
                    errorSFX.play();
                    return showMessage("‚ùå Kh√¥ng kh·ªõp SKU n√†o ƒëang ch·ªù ki·ªÉm", "danger");
                }

                state.selectedProductSKU = found.sku;
                state.selectedSlotIndex = found.orderIndex;
                document.getElementById("mainInput").placeholder = `üî¢ Qu√©t m√£ slot #${found.orderIndex}`;
                document.getElementById("productInfo").classList.remove("d-none");
                document.getElementById("productName").innerText = found.productName;
                document.getElementById("sku").innerText = found.sku;
                updateCarousel(found.imageUrls);

                showMessage(`‚úÖ SKU kh·ªõp v·ªõi slot #${found.orderIndex}. Qu√©t m√£ #${found.orderIndex} ƒë·ªÉ x√°c nh·∫≠n`, "success");
                successSFX.play();
                return;
            }

            // Step 3: Qu√©t m√£ slot ƒë·ªÉ x√°c nh·∫≠n
            const matched = code.startsWith("#") && parseInt(code.slice(1)) === state.selectedSlotIndex;
            if (!matched) {
                errorSFX.play();
                return showMessage("‚ùå Slot kh√¥ng kh·ªõp OrderIndex", "danger");
            }

            try {
                const slot = state.slots.find(s => s.orderIndex === state.selectedSlotIndex && s.sku === state.selectedProductSKU);
                if (!slot) throw new Error("Kh√¥ng t√¨m th·∫•y slot t∆∞∆°ng ·ª©ng");

                const res = await fetch("https://localhost:7204/api/CheckTask/mix-sku/validate", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${jwt}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        checkTaskDetailId: slot.checkTaskDetailId,
                        sku: state.selectedProductSKU
                    })
                });

                if (!res.ok) throw new Error("X√°c nh·∫≠n th·∫•t b·∫°i");

                // ‚úÖ In h√≥a ƒë∆°n
                const printRes = await fetch(`https://localhost:7204/api/Bill/by-check-detail/${slot.checkTaskDetailId}`, {
                    headers: { "Authorization": `Bearer ${jwt}` }
                });

                const bills = await printRes.json();
                for (const bill of bills) {
                    const popup = window.open("", "", "width=600,height=800");
                    popup.document.write(bill.htmlContent);
                    popup.document.close();
                    popup.focus();
                    await new Promise(resolve => {
                        popup.onload = () => {
                            popup.print();
                            setTimeout(() => popup.close(), 500);
                            resolve();
                        };
                    });
                }

                slot.isChecked = true;
                updateSlotStyles();

                showMessage("‚úÖ ƒê√£ x√°c nh·∫≠n v√† in h√≥a ƒë∆°n", "success");
                successSFX.play();

                state.selectedProductSKU = null;
                state.selectedSlotIndex = null;
                document.getElementById("mainInput").placeholder = "üì¶ Qu√©t m√£ SKU...";
                document.getElementById("productInfo").classList.add("d-none");

                // üëâ C·∫≠p nh·∫≠t l·∫°i localStorage
                localStorage.setItem("checkTaskState", JSON.stringify({
                    checkTaskId: state.checkTaskId,
                    slots: state.slots
                }));

                // ‚úÖ N·∫øu t·∫•t c·∫£ ƒë√£ xong
                const allChecked = state.slots.every(s => s.isChecked);
                if (allChecked) {
                    showMessage("üéâ ƒê√£ ho√†n t·∫•t t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng!", "success");
                    localStorage.removeItem("checkTaskState");
                }

            } catch (err) {
                errorSFX.play();
                showMessage("‚ùå " + err.message, "danger");
            }
        });
    </script>
}
