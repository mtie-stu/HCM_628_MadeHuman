@{
    ViewData["Title"] = "Ki·ªÉm h√†ng Mix SKU";
}

<div class="container mt-4">
    <div class="row">
        <!-- üìç Card V·ªã tr√≠ & BasketId (1/4 b√™n tr√°i) -->
        <div class="col-md-3">
            <div class="card shadow-sm mb-3">
                <div class="card-header">üìç V·ªã tr√≠ l√†m vi·ªác</div>
                <div class="card-body">
                    <input type="text" id="locationInput" class="form-control mb-2" placeholder="üîé V·ªã tr√≠ ki·ªÉm" />
                    <input type="text" id="basketInput" class="form-control" placeholder="üß∫ M√£ r·ªï (BasketId)" />
                </div>
            </div>

            <!-- üîç Thao t√°c -->
            <div class="card shadow-sm">
                <div class="card-header">üîç Qu√©t m√£</div>
                <div class="card-body">
                    <input type="text" id="mainInput" class="form-control mb-2" placeholder="üì¶ Qu√©t m√£ SKU..." autofocus autocomplete="off" />

                    <div id="productInfo" class="mt-3 d-none">
                        <p><strong>T√™n:</strong> <span id="productName">---</span></p>
                        <p><strong>SKU:</strong> <span id="sku">---</span></p>
                        <div id="carouselContainer" class="mt-2">
                            <div id="imageCarousel" class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-inner"></div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon"></span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next">
                                    <span class="carousel-control-next-icon"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div id="messageArea" class="alert d-none mt-3" role="alert"></div>
                </div>
            </div>
        </div>

        <!-- üßæ Grid 12 slots (2/4 b√™n ph·∫£i) -->
        <div class="col-md-9">
            <div class="row" id="slotGrid">
                @for (int i = 1; i <= 12; i++)
                {
                    <div class="col-md-3 mb-3">
                        <div class="card text-center h-100" id="slotCard_@i">
                            <div class="card-body">
                                <div class="mb-2"><strong>#@i</strong></div>
                                <button id="btnDetail_@i" class="btn btn-sm btn-primary mb-2" onclick="showDetail(@i)">Chi ti·∫øt</button>
                                <input type="hidden" id="slotData_@i" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        /* ===========================
         * Mix-SKU Check View Script
         * - Flow: Basket ‚Üí SKU ‚Üí #slot
         * - ∆Øu ti√™n slot c√≤n thi·∫øu (remaining > 0) c√≥ OrderIndex nh·ªè nh·∫•t
         * - Lo·∫°i tr·ª´ c√°c card disabled kh·ªèi vi·ªác match SKU
         * - X·ª≠ l√Ω code tr·∫£ v·ªÅ t·ª´ BE: 1/2/3
         * =========================== */

        const successSFX = new Audio("/sounds/success.mp3");
        const errorSFX = new Audio("/sounds/error.mp3");
        const BASE_URL = "https://localhost:7204";

        const state = {
            checkTaskId: null,
            // slots: [{ checkTaskDetailId, orderIndex, skuId, requiredQuantity, checkedQuantity, isChecked, productName, sku, imageUrls }]
            slots: [],
            selectedProductSKU: null,
            selectedSlotIndex: null
        };

        function jwt() {
            return document.cookie.split("; ").find(x => x.startsWith("JWTToken="))?.split("=")[1];
        }

        function showMessage(msg, type = "info") {
            const area = document.getElementById("messageArea");
            area.className = `alert alert-${type}`;
            area.textContent = msg;
            area.classList.remove("d-none");
        }

        function updateCarousel(imageUrls) {
            const carouselInner = document.querySelector("#imageCarousel .carousel-inner");
            if (!carouselInner) return;
            if (!imageUrls || imageUrls.length === 0) {
                carouselInner.innerHTML = `
              <div class="d-flex align-items-center justify-content-center bg-light h-100 text-muted">
                <p class="text-center m-3">Kh√¥ng c√≥ ·∫£nh.</p>
              </div>`;
                return;
            }
            carouselInner.innerHTML = imageUrls.map((url, i) => `
            <div class="carousel-item ${i === 0 ? 'active' : ''}">
              <img src="/proxy-image?url=${encodeURIComponent(url)}"
                   class="img-thumbnail d-block mx-auto"
                   style="max-height:250px; object-fit:contain;"
                   alt="·∫¢nh s·∫£n ph·∫©m">
            </div>`).join("");
        }

        function showDetail(slotIndex) {
            const group = state.slots.filter(s => s.orderIndex === slotIndex);
            if (group.length === 0) return;
            const lines = group.map(d => `‚Ä¢ ${d.productName} (SKU: ${d.sku}) x ${d.requiredQuantity} ‚Äî ƒê√£ qu√©t: ${d.checkedQuantity ?? 0}`);
            alert(`üì¶ Slot #${slotIndex}\n` + lines.join("\n"));
        }
        window.showDetail = showDetail;

        function setCardDisabled(index, disabled = true) {
            const card = document.getElementById(`slotCard_${index}`);
            const btn = document.getElementById(`btnDetail_${index}`);
            if (!card || !btn) return;
            if (disabled) {
                card.classList.add("bg-light", "opacity-50");
                btn.classList.replace("btn-primary", "btn-secondary");
                btn.disabled = true;
            } else {
                card.classList.remove("bg-light", "opacity-50");
                btn.classList.replace("btn-secondary", "btn-primary");
                btn.disabled = false;
            }
        }

        function isIndexDisabled(index) {
            // Disabled n·∫øu: kh√¥ng c√≥ s·∫£n ph·∫©m cho card n√†y HO·∫∂C t·∫•t c·∫£ item trong card ƒë√£ ƒë·ªß
            const group = state.slots.filter(s => s.orderIndex === index);
            if (group.length === 0) return true;
            return group.every(s => s.isChecked || (s.checkedQuantity ?? 0) >= s.requiredQuantity);
        }

        function updateSlotStyles() {
            const indicesWithData = new Set(state.slots.map(s => s.orderIndex));
            for (let i = 1; i <= 12; i++) {
                if (!indicesWithData.has(i)) {
                    setCardDisabled(i, true); // kh√¥ng c√≥ s·∫£n ph·∫©m ‚Üí disable
                    continue;
                }
                const group = state.slots.filter(s => s.orderIndex === i);
                const groupDone = group.every(s => s.isChecked || (s.checkedQuantity ?? 0) >= s.requiredQuantity);
                setCardDisabled(i, groupDone);
            }
        }

        function hideProductBox() {
            document.getElementById("productInfo").classList.add("d-none");
            document.getElementById("productName").innerText = "---";
            document.getElementById("sku").innerText = "---";
            const carouselInner = document.querySelector("#imageCarousel .carousel-inner");
            if (carouselInner) carouselInner.innerHTML = "";
        }

        function resetToStep1() {
            state.selectedProductSKU = null;
            state.selectedSlotIndex = null;
            const main = document.getElementById("mainInput");
            main.placeholder = "üì¶ Qu√©t m√£ SKU...";
            hideProductBox();
            main.focus();
        }

        function clearAndRefreshForNewTask() {
            try { localStorage.removeItem("checkTaskState"); } catch { }
            const basket = document.getElementById("basketInput");
            if (basket) basket.value = "";
            window.location.reload();
        }

        function checkAllSlotsDisabledAndRefreshIfDone() {
            for (let i = 1; i <= 12; i++) {
                const btn = document.getElementById(`btnDetail_${i}`);
                if (btn && !btn.disabled) return;
            }
            clearAndRefreshForNewTask();
        }

        function persistState() {
            localStorage.setItem("checkTaskState", JSON.stringify({
                checkTaskId: state.checkTaskId,
                slots: state.slots
            }));
        }

        function restoreState() {
            const saved = localStorage.getItem("checkTaskState");
            if (!saved) return;
            try {
                const parsed = JSON.parse(saved);
                state.checkTaskId = parsed.checkTaskId;
                state.slots = parsed.slots || [];
                updateSlotStyles();
                showMessage("üîÑ ƒê√£ kh√¥i ph·ª•c nhi·ªám v·ª• ki·ªÉm h√†ng t·ª´ phi√™n tr∆∞·ªõc", "info");
            } catch { }
        }

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ G√ÅN BASKET ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        document.getElementById("basketInput").addEventListener("change", async function () {
            const basketId = this.value.trim();
            const token = jwt();
            if (!basketId || !token) return showMessage("‚ùå Thi·∫øu m√£ r·ªï ho·∫∑c token", "danger");

            try {
                const res = await fetch(`${BASE_URL}/api/CheckTask/assign-user/${basketId}`, {
                    method: "POST",
                    headers: { "Authorization": `Bearer ${token}` }
                });
                const task = await res.json();
                if (!res.ok) throw new Error(task?.message || "Kh√¥ng th·ªÉ g√°n nhi·ªám v·ª•");

                state.checkTaskId = task.id;
                state.slots = [];

                // Map details -> slots (∆∞u ti√™n l·∫•y QuantityChecked n·∫øu BE c√≥ tr·∫£)
                (task.details || []).forEach(detail => {
                    (detail.outboundTaskItem?.itemDetails || []).forEach(i => {
                        state.slots.push({
                            checkTaskDetailId: detail.id,
                            orderIndex: detail.orderIndex,
                            skuId: i.productSKUId,
                            requiredQuantity: i.quantity,
                            checkedQuantity: i.quantityChecked ?? 0,
                            // N·∫øu BE set detail.status cho c·∫£ nh√≥m done, v·∫´n gi·ªØ; nh∆∞ng ch√≠nh x√°c nh·∫•t l√† so s√°nh checked vs required
                            isChecked: detail.status === 1 || ((i.quantityChecked ?? 0) >= i.quantity),
                            productName: "--",
                            sku: "--",
                            imageUrls: []
                        });
                    });
                });

                // T·∫£i th√¥ng tin s·∫£n ph·∫©m (per-id)
                const tokenHeader = { "Authorization": `Bearer ${token}` };
                const skuIds = [...new Set(state.slots.map(s => s.skuId))];
                const productMap = {};
                for (const id of skuIds) {
                    const r = await fetch(`${BASE_URL}/api/Product/sku/${id}`, { headers: tokenHeader });
                    if (r.ok) productMap[id] = await r.json();
                }
                state.slots.forEach(slot => {
                    const p = productMap[slot.skuId];
                    if (p) {
                        slot.productName = p.productName ?? p.name ?? "--";
                        slot.sku = p.skuCode ?? p.code ?? "--";
                        slot.imageUrls = p.imageUrls || [];
                    }
                });

                // L∆∞u v√† c·∫≠p nh·∫≠t UI
                persistState();
                updateSlotStyles(); // s·∫Ω t·ª± disable card kh√¥ng c√≥ s·∫£n ph·∫©m
                showMessage("‚úÖ ƒê√£ g√°n nhi·ªám v·ª• v√† t·∫£i th√¥ng tin s·∫£n ph·∫©m", "success");
                successSFX.play();

                document.getElementById("mainInput").focus();
            } catch (err) {
                errorSFX.play();
                showMessage("‚ùå " + err.message, "danger");
            }
        });

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ QU√âT M√É (SKU ‚Üí #slot) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        document.getElementById("mainInput").addEventListener("change", async function () {
            const code = this.value.trim();
            this.value = "";
            const token = jwt();
            if (!token || !code) return;

            // STEP 2: qu√©t SKU ‚Üí ch·ªçn slot c√≤n thi·∫øu (remaining > 0) c√≥ OrderIndex nh·ªè nh·∫•t, b·ªè qua card disabled
            if (!state.selectedProductSKU) {
                const candidates = state.slots
                    .filter(s =>
                        s.sku === code &&
                        (s.checkedQuantity ?? 0) < s.requiredQuantity &&
                        !isIndexDisabled(s.orderIndex)     // üëà lo·∫°i tr·ª´ card disabled
                    )
                    .sort((a, b) => a.orderIndex - b.orderIndex);
                const found = candidates[0];

                if (!found) {
                    errorSFX.play();
                    return showMessage("‚ùå Kh√¥ng kh·ªõp SKU n√†o ƒëang ch·ªù ki·ªÉm", "danger");
                }

                state.selectedProductSKU = found.sku;
                state.selectedSlotIndex = found.orderIndex;

                const remaining = found.requiredQuantity - (found.checkedQuantity ?? 0);
                const main = document.getElementById("mainInput");
                main.placeholder = `üî¢ Qu√©t m√£ slot #${found.orderIndex} (c√≤n thi·∫øu: ${remaining})`;
                document.getElementById("productInfo").classList.remove("d-none");
                document.getElementById("productName").innerText = found.productName;
                document.getElementById("sku").innerText = found.sku;
                updateCarousel(found.imageUrls);

                showMessage(`‚úÖ SKU kh·ªõp v·ªõi slot #${found.orderIndex}. C√≤n thi·∫øu: ${remaining}. Qu√©t m√£ #${found.orderIndex} ƒë·ªÉ x√°c nh·∫≠n`, "success");
                successSFX.play();
                return;
            }

            // STEP 3: qu√©t m√£ slot
            const matched = code.startsWith("#") && parseInt(code.slice(1)) === state.selectedSlotIndex;
            if (!matched) {
                errorSFX.play();
                return showMessage("‚ùå Slot kh√¥ng kh·ªõp OrderIndex", "danger");
            }

            // N·∫øu card v·ª´a b·ªã disable (edge-case do state thay ƒë·ªïi) ‚Üí ch·∫∑n x√°c nh·∫≠n
            if (isIndexDisabled(state.selectedSlotIndex)) {
                errorSFX.play();
                showMessage("‚ùå Slot ƒë√£ b·ªã kh√≥a/ho√†n t·∫•t. H√£y qu√©t SKU ƒë·ªÉ ch·ªçn slot kh√°c.", "danger");
                resetToStep1();
                return;
            }

            try {
                const slot = state.slots.find(s =>
                    s.orderIndex === state.selectedSlotIndex &&
                    s.sku === state.selectedProductSKU &&
                    (s.checkedQuantity ?? 0) < s.requiredQuantity
                );
                if (!slot) throw new Error("Kh√¥ng t√¨m th·∫•y slot t∆∞∆°ng ·ª©ng ho·∫∑c slot ƒë√£ ƒë·ªß");

                // G·ªçi validate ‚Üí BE tr·∫£ { code, logs }
                const res = await fetch(`${BASE_URL}/api/CheckTask/mix-sku/validate`, {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        checkTaskDetailId: slot.checkTaskDetailId,
                        sku: state.selectedProductSKU
                    })
                });

                if (!res.ok) throw new Error("X√°c nh·∫≠n th·∫•t b·∫°i");
                const data = await res.json(); // { code: 1|2|3, logs: [...] }
                const codeResult = Number(data?.code ?? 1);

                // C·∫≠p nh·∫≠t local theo code (ƒëi·ªÅu ph·ªëi ƒë√∫ng remaining)
                if (codeResult === 1) {
                    slot.checkedQuantity = Math.min((slot.checkedQuantity ?? 0) + 1, slot.requiredQuantity);
                    if (slot.checkedQuantity >= slot.requiredQuantity) {
                        slot.isChecked = true;
                    }
                } else if (codeResult === 2 || codeResult === 3) {
                    slot.checkedQuantity = slot.requiredQuantity;
                    slot.isChecked = true;
                }

                // In h√≥a ƒë∆°n n·∫øu code 2/3
                if (codeResult === 2 || codeResult === 3) {
                    const printRes = await fetch(`${BASE_URL}/api/Bill/by-check-detail/${slot.checkTaskDetailId}`, {
                        headers: { "Authorization": `Bearer ${token}` }
                    });
                    if (printRes.ok) {
                        const bills = await printRes.json();
                        for (const bill of bills) {
                            const popup = window.open("", "", "width=600,height=800");
                            if (popup) {
                                popup.document.write(bill.htmlContent);
                                popup.document.close();
                                popup.onload = () => {
                                    try { popup.print(); } catch { }
                                    setTimeout(() => { try { popup.close(); } catch { } }, 500);
                                };
                            }
                        }
                    }
                }

                updateSlotStyles();
                persistState();
                successSFX.play();

                const lastLog = (data?.logs && data.logs.length) ? data.logs[data.logs.length - 1] : "‚úÖ ƒê√£ x√°c nh·∫≠n.";
                showMessage(lastLog, "success");

                // H√†nh vi theo code
                if (codeResult === 3) {
                    // CheckTask ho√†n t·∫•t ‚Üí refresh & clear basket
                    clearAndRefreshForNewTask();
                    return;
                }

                // Reset v·ªÅ Step 1 ƒë·ªÉ ti·∫øp t·ª•c
                resetToStep1();

                // N·∫øu t·∫•t c·∫£ card ƒë√£ disable ‚Üí refresh ƒë·ªÉ nh·∫≠n nhi·ªám v·ª• m·ªõi
                checkAllSlotsDisabledAndRefreshIfDone();

            } catch (err) {
                errorSFX.play();
                showMessage("‚ùå " + err.message, "danger");
            }
        });

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ KH·ªûI T·∫†O ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        (function init() {
            restoreState();
            updateSlotStyles();
            document.getElementById("mainInput").focus();
        })();
    </script>
}


