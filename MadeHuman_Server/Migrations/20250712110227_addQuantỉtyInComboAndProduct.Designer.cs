// <auto-generated />
using System;
using MadeHuman_Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MadeHuman_Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712110227_addQuantỉtyInComboAndProduct")]
    partial class addQuantỉtyInComboAndProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CheckInCheckOutLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCheckIn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOvertime")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PartTimeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UsersTasksId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersTasksId");

                    b.ToTable("CheckInCheckOutLog");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InboundReceiptItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InboundReceiptId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductSKUId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InboundReceiptId");

                    b.HasIndex("ProductSKUId");

                    b.ToTable("InboundReceiptItems");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InboundReceipts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("InboundReceipt");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InboundTasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("InboundReceiptId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InboundReceiptId")
                        .IsUnique();

                    b.HasIndex("UserTaskId");

                    b.ToTable("InboundTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ProductSKUId")
                        .HasColumnType("uuid");

                    b.Property<int?>("QuantityBooked")
                        .HasColumnType("integer");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("WarehouseLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductSKUId");

                    b.HasIndex("WarehouseLocationId")
                        .IsUnique();

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InventoryLogs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActionInventoryLogs")
                        .HasColumnType("integer");

                    b.Property<string>("ChangeBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChangeQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RemainingQuantity")
                        .HasColumnType("integer");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryLogs");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.ProductBatches", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InboundTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductSKUId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StatusProductBatches")
                        .HasColumnType("integer");

                    b.Property<Guid>("WarehouseLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InboundTaskId");

                    b.HasIndex("ProductSKUId");

                    b.HasIndex("WarehouseLocationId")
                        .IsUnique();

                    b.ToTable("ProductBatches");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.RefillTaskDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FromLocation")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductSKUId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("RefillTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RefillTasksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToLocation")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductSKUId");

                    b.HasIndex("RefillTasksId");

                    b.ToTable("RefillTaskDetails");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.RefillTasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LowStockId")
                        .HasColumnType("uuid");

                    b.Property<int>("StatusRefillTasks")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LowStockId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefillTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Combo", b =>
                {
                    b.Property<Guid>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ComboId");

                    b.ToTable("Combos");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ComboItem", b =>
                {
                    b.Property<Guid>("ComboItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ComboItemId");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("ComboItems");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductSKUsId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShopOrderId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("ProductSKUsId");

                    b.HasIndex("ShopOrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("QuantityInStock")
                        .HasColumnType("integer");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ProductItem", b =>
                {
                    b.Property<Guid>("ProductItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProductItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ProductSKU", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId")
                        .IsUnique();

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductSKUs", t =>
                        {
                            t.HasCheckConstraint("CK_ProductSKU_Owner", "(\"ProductId\" IS NOT NULL AND \"ComboId\" IS NULL) OR (\"ProductId\" IS NULL AND \"ComboId\" IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Product_Combo_Img", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_Combo_Imgs");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ShopOrder", b =>
                {
                    b.Property<Guid>("ShopOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ShopOrderId");

                    b.HasIndex("AppUserId");

                    b.ToTable("ShopOrders");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.PartTime", b =>
                {
                    b.Property<Guid>("PartTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CCCD")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusPartTimes")
                        .HasColumnType("integer");

                    b.HasKey("PartTimeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("PartTimes");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.PartTimeAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("BreakDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("OvertimeDuration")
                        .HasColumnType("interval");

                    b.Property<Guid?>("PartTimeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartTimeId1")
                        .HasColumnType("uuid");

                    b.Property<string>("ShiftCode")
                        .HasColumnType("text");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("UsersTasksId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("WorkDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PartTimeId");

                    b.HasIndex("PartTimeId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UsersTasksId");

                    b.ToTable("PartTimeAssignment");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.Part_Time_Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PartTimeCompanies");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.UsersTasks", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("BreakDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HourlyKPIs")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("OvertimeDuration")
                        .HasColumnType("interval");

                    b.Property<Guid?>("PartTimeId")
                        .HasColumnType("uuid");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer");

                    b.Property<int>("TotalKPI")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PartTimeId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.LowStockAlerts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("StatusLowStockAlerts")
                        .HasColumnType("integer");

                    b.Property<Guid>("WarehouseLocationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("LowStockAlerts");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WareHouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("WareHouses");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WarehouseLocations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LowStockId")
                        .HasColumnType("uuid");

                    b.Property<string>("NameLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusWareHouse")
                        .HasColumnType("integer");

                    b.Property<Guid>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LowStockId");

                    b.HasIndex("ZoneId");

                    b.ToTable("WarehouseLocations");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WarehouseZones", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseZones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypes")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("CheckInCheckOutLog", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.User_Task.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.User_Task.UsersTasks", "UsersTasks")
                        .WithMany()
                        .HasForeignKey("UsersTasksId");

                    b.Navigation("User");

                    b.Navigation("UsersTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InboundReceiptItems", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Inbound.InboundReceipts", "InboundReceipts")
                        .WithMany("InboundReceiptItems")
                        .HasForeignKey("InboundReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.Shop.ProductSKU", "ProductSKUs")
                        .WithMany()
                        .HasForeignKey("ProductSKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InboundReceipts");

                    b.Navigation("ProductSKUs");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InboundTasks", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Inbound.InboundReceipts", "InboundReceipts")
                        .WithOne("InboundTasks")
                        .HasForeignKey("MadeHuman_Server.Model.Inbound.InboundTasks", "InboundReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.User_Task.UsersTasks", "UsersTasks")
                        .WithMany("InboundTasks")
                        .HasForeignKey("UserTaskId");

                    b.Navigation("InboundReceipts");

                    b.Navigation("UsersTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.Inventory", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.ProductSKU", "ProductSKUs")
                        .WithMany("Inventory")
                        .HasForeignKey("ProductSKUId");

                    b.HasOne("MadeHuman_Server.Model.WareHouse.WarehouseLocations", "WarehouseLocations")
                        .WithOne("Inventory")
                        .HasForeignKey("MadeHuman_Server.Model.Inbound.Inventory", "WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSKUs");

                    b.Navigation("WarehouseLocations");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InventoryLogs", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Inbound.Inventory", "Inventory")
                        .WithMany("InventoryLogs")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.ProductBatches", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Inbound.InboundTasks", "InboundTasks")
                        .WithMany("ProductBatches")
                        .HasForeignKey("InboundTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.Shop.ProductSKU", "ProductSKUs")
                        .WithMany()
                        .HasForeignKey("ProductSKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.WareHouse.WarehouseLocations", "WarehouseLocation")
                        .WithOne("ProductBatch")
                        .HasForeignKey("MadeHuman_Server.Model.Inbound.ProductBatches", "WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InboundTasks");

                    b.Navigation("ProductSKUs");

                    b.Navigation("WarehouseLocation");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.RefillTaskDetails", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.ProductSKU", "ProductSKUs")
                        .WithMany()
                        .HasForeignKey("ProductSKUId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.Inbound.RefillTasks", "RefillTasks")
                        .WithMany("RefillTaskDetails")
                        .HasForeignKey("RefillTasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSKUs");

                    b.Navigation("RefillTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.RefillTasks", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.WareHouse.LowStockAlerts", "LowStockAlerts")
                        .WithOne("RefillTasks")
                        .HasForeignKey("MadeHuman_Server.Model.Inbound.RefillTasks", "LowStockId");

                    b.HasOne("MadeHuman_Server.Model.User_Task.UsersTasks", "UsersTasks")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LowStockAlerts");

                    b.Navigation("UsersTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ComboItem", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.Combo", "Combo")
                        .WithMany("ComboItems")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.Shop.Product", "Product")
                        .WithMany("ComboItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.OrderItem", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.ProductItem", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductItemId");

                    b.HasOne("MadeHuman_Server.Model.Shop.ProductSKU", "ProductSKUs")
                        .WithMany()
                        .HasForeignKey("ProductSKUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MadeHuman_Server.Model.Shop.ShopOrder", "ShopOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("ShopOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductSKUs");

                    b.Navigation("ShopOrder");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Product", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ProductItem", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ProductSKU", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.Combo", "Combo")
                        .WithOne("ProductSKU")
                        .HasForeignKey("MadeHuman_Server.Model.Shop.ProductSKU", "ComboId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MadeHuman_Server.Model.Shop.Product", "Product")
                        .WithOne("ProductSKU")
                        .HasForeignKey("MadeHuman_Server.Model.Shop.ProductSKU", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Product_Combo_Img", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.Shop.Combo", "Combo")
                        .WithMany("Product_Combo_Img")
                        .HasForeignKey("ComboId");

                    b.HasOne("MadeHuman_Server.Model.Shop.Product", "Product")
                        .WithMany("Product_Combo_Img")
                        .HasForeignKey("ProductId");

                    b.Navigation("Combo");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ShopOrder", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.User_Task.AppUser", "AppUser")
                        .WithMany("ShopOrders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.PartTime", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.User_Task.Part_Time_Company", "Company")
                        .WithMany("PartTimes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.PartTimeAssignment", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.User_Task.Part_Time_Company", "part_Time_Company")
                        .WithMany("Assignments")
                        .HasForeignKey("CompanyId");

                    b.HasOne("MadeHuman_Server.Model.User_Task.PartTime", "PartTime")
                        .WithMany()
                        .HasForeignKey("PartTimeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MadeHuman_Server.Model.User_Task.PartTime", null)
                        .WithMany("Assignments")
                        .HasForeignKey("PartTimeId1");

                    b.HasOne("MadeHuman_Server.Model.User_Task.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MadeHuman_Server.Model.User_Task.UsersTasks", "UsersTasks")
                        .WithMany()
                        .HasForeignKey("UsersTasksId");

                    b.Navigation("PartTime");

                    b.Navigation("User");

                    b.Navigation("UsersTasks");

                    b.Navigation("part_Time_Company");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.UsersTasks", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.User_Task.PartTime", "PartTimes")
                        .WithMany()
                        .HasForeignKey("PartTimeId");

                    b.HasOne("MadeHuman_Server.Model.User_Task.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartTimes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.LowStockAlerts", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.WareHouse.WarehouseLocations", "WarehouseLocations")
                        .WithMany()
                        .HasForeignKey("WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WarehouseLocations");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WarehouseLocations", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.WareHouse.LowStockAlerts", "LowStockAlerts")
                        .WithMany()
                        .HasForeignKey("LowStockId");

                    b.HasOne("MadeHuman_Server.Model.WareHouse.WarehouseZones", "WarehouseZones")
                        .WithMany("WarehouseLocations")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LowStockAlerts");

                    b.Navigation("WarehouseZones");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WarehouseZones", b =>
                {
                    b.HasOne("MadeHuman_Server.Model.WareHouse.WareHouse", "WareHouse")
                        .WithMany("WarehouseZones")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WareHouse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InboundReceipts", b =>
                {
                    b.Navigation("InboundReceiptItems");

                    b.Navigation("InboundTasks")
                        .IsRequired();
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.InboundTasks", b =>
                {
                    b.Navigation("ProductBatches");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.Inventory", b =>
                {
                    b.Navigation("InventoryLogs");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Inbound.RefillTasks", b =>
                {
                    b.Navigation("RefillTaskDetails");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Combo", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("ProductSKU")
                        .IsRequired();

                    b.Navigation("Product_Combo_Img");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.Product", b =>
                {
                    b.Navigation("ComboItems");

                    b.Navigation("ProductItems");

                    b.Navigation("ProductSKU")
                        .IsRequired();

                    b.Navigation("Product_Combo_Img");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ProductItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ProductSKU", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.Shop.ShopOrder", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.PartTime", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.Part_Time_Company", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("PartTimes");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.UsersTasks", b =>
                {
                    b.Navigation("InboundTasks");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.LowStockAlerts", b =>
                {
                    b.Navigation("RefillTasks")
                        .IsRequired();
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WareHouse", b =>
                {
                    b.Navigation("WarehouseZones");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WarehouseLocations", b =>
                {
                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("ProductBatch")
                        .IsRequired();
                });

            modelBuilder.Entity("MadeHuman_Server.Model.WareHouse.WarehouseZones", b =>
                {
                    b.Navigation("WarehouseLocations");
                });

            modelBuilder.Entity("MadeHuman_Server.Model.User_Task.AppUser", b =>
                {
                    b.Navigation("ShopOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
